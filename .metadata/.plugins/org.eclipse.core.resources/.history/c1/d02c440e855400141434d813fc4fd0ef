package heapData;

import java.lang.Comparable;


public class MaxHeap<E extends Comparable<? super E>>
{
	private int num;
	private E[] heap;
	private int heap_size;
	
	public MaxHeap(E[] Heap, int Num, int Max)
	{
		heap      = Heap;
		num       = Num;
		heap_size = Max;
		
	}
	
	public MaxHeap()
	{
		
	}
	
	/*
	 * Takes an arbitrary array and builds it into a max heap
	 */
	public void Build_Max_Heap()
	{
		
	}
	
	/*
	 * Takes an almost-heap with one violation, and fixes the violation
	 */
	public void Max_Heapify()
	{
		
	}
	
	/*
	 * Returns the largest element in the max heap
	 */
	public void Heap_Maximum()
	{
		
	}
	
	/*
	 * 	Removes and returns the largest element in the max heap
	 */
	public void Heap_Extract_Max()
	{
		
	}
	
	/*
	 * Inserts a new element into the heap, preserving the heap property
	 */
	public void Max_Heap_Insert()
	{
		
	}
	
	
	/*
	 * Prints the array representation (e.g. [16,14,10,8,7,3,9,1,4,2])
	 */
	public void printAsArray()
	{
		
	}
	
	/*
	 * Prints the heap as a sideways tree.
	 */
	public void printAsTree()
	{
		
	}

}
